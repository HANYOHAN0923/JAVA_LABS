객체지향언어
1. 코드 재사용성이 높다. 부모 자식의 관게를 통해 기존 코드를 이용하여 발전 가능
2. 코드 관리가 용이하다. 위와 마찬가지로 더 쉽게 코드를 수정하여 발전시킬 수 있음
3. 신뢰성이 높은 프로그래밍이 가능하다. 제어자와 메서드를 이용해서 데이터를 보호하고 올바른 값을 유지하도록 하며,
코드의 중복을 제거하여 코드의 부일치로 인한 오작동을 방지할 수 있다.

# 클래스
정의: 객체를 정의해 놓은 것이다
용도: 객체를 생성하는데 사용된다

# 객체 (프로그래밍이라는 범위 안에서의)
정의: 메모리에 생성된 것
용도: 객체가 가지고 있는 기능과 속성에 따라 다름

클래스가 제품 설계도라면 객체는 제품, 클래스가 붕어빵 기계라면 객체는 붕어빵이라고 보면 된다. 이렇게 클래스를 만들면
객체를 만들기는 더 쉬워진다.


# 객체와 인스턴스
클래스로부터 객체를 만드는 과정을 클래스의 인스턴스화라고 한다. 어떤 클래스로부터 만들어진 객체를 그 클래스의 인스턴스라고 한다.
* 결국 인스턴스와 객체는 같은 의미이지만, 객체는 모든 인스턴스를 대표하는 포괄적인 의미를 갖고 있으며, 인스턴스는 특정 클래스로부터
만들어진 것인지를 강조하는 보다 구체적인 의미를 갖고 있다.

Ex) 책상은 객체이다. 책상은 책상 클래스의 인스턴스이다.


# 객체의 구성요소 - 속성과 기능
속성(property): 멤버변수, 특성, 필트 상태 (즉 속성 property는 매게변수)
기능(function): 메서드, 함수, 행위 (즉 기능 function은 메소드)



# 인스턴스의 생성과 사용 (Iphone.java)