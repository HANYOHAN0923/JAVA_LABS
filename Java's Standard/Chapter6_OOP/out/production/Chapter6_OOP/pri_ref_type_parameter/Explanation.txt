-PrimitiveParameterEx.java
1) change()가 호출되면서 d.x가 change메서드의 매개변수 x에 복사됨 (즉, d.x가 아니라 d.x의 값을 복사본으로 갖는 change()
의 매개변수 x의 값이 변경되어 출려된 것이다)
2) change()의 매개변수 x의 값을 1000으로 변경
3) change()가 종료되면서 매개변수 x는 스택에서 제거됨

결론: 이처럼 기본형 매개변수는 변수에 저장된 값만 읽을 수만 있을 뿐 변경할 수는 없다.


-ReferenceParameterEx.java
PrimitiveParameterEx.java에서는 기본형 매개변수를 change()에게 넘겨주었다면, 이 예제에서는 매개변수가 참조형이라서 '값이
저장된 주소'를 넘겨주었다. 따라서 값을 읽고, 쓰는 것이 다 가능한 것이다.
1) change()기 호출되면서 참조변수 d의 값(주소)이 매개변수 d에 복사된다. 이제 매개변수 d에 저장된 주소 값으로 x에 접근이
가능하다.
2) change()에서 매개변수 d로 x의 값을 1000으로 변경
3) change()가 종료되면서 매개변수 d는 스택에서 제거됨 (여기서 change()의 매개변수 이름은 아무거나 해도 된다)


-ReferenceParameterEx2,3.java
배열도 객체와 같이 참조변수를 통해 데이터가 저장된 공간에 접근한다. 이전 예제의 Data클래스 타입의 참조변수 d와 같이
변수 x도 int배열타입의 참조변수이기 때문에 같은 결과를 얻는다.


-ReturnTest.java
반환값이 있는 메서드를 반환값이 없는 메서드로 바꾸는 방법. 참조형 매개변수를 활용하면 반환값이 없어도 메서드의 실행결과
를 얻어 올 수 있다


-ReferenceReturnEx.java
매개변수뿐만 아니라 반환타입도 참조형이 될 수 있다. 모든 참조형 타입의 값은 '객체의 주소'이다.
1) copy()를 호출하면서 참조변수 d의 값이 매개변수 d에 복사된다
2) 새로운 객체를 생성한 다음, d.x에 저장된 값을 tmp.x에 복사한다
3) copy()가 종료되면서 반환한 tmp의 값은 참조변수 d2에 저장된다.
4) copy()가 종료되어 tmp가 사라졌지만, d2로 새로운 객체를 다룰 수 있다.

