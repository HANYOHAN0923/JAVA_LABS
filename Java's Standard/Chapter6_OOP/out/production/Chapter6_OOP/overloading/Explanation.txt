-오버로딩이란?
메서드와 변수는 같은 클래스 내에서 서로 구별될 수 있어야하기 때문에 각기 다른 이름을 가져야 한다.
그렇지만, 한 클래스 내에 같은 이름의 메서드를 여러 개 정의하는 것을 메서드 '오버로딩'이라고 한다.

오버로딩을 사용하는 이유는 println()으로 예를 들겠자면, println()은 정수, 실수, 문자열 등 다양한
자료형을 출력한다. 이때의 println()은 오버로딩된 메서드이다. 받는 매개변수의 타입이 다르지만,
이름은 println()으로 같은 오버로딩 메서드인 것이다.
오버로딩이 안된다면 우리는 println()을 사용할때 정수면 printlnString(), printlnBoolean()이런식으로
더 긴 이름을 사용해야할 것이다. 반면 println()이 오버로딩 되어서 어떤 자료형이든 출력을 하는 방법을
사용하면 더 간단하다.

-조건 (위의 2조건이 충족 안되는 경우 메서드는 중복 정의로 간주되어 컴파일 에러 발생)
1. 메서드 이름이 같아야 한다.
2. 매개변수의 개수 또는 타입이 달라야 한다.
*** 매개변수의 반환 타입은 오버로딩에 조건에 포함되지 않는다

int add(long x, int y) {}와
int add(int x, long y) {}는 오버로딩으로 간주한다.


- 가변인자(var'args')와 오버로딩
메서드의 매개변수는 고정적이지 않다. 동적으로 지정해줄 수 있는데 이것을 가변인자라고 한다.
가변인자는 '타입... 변수명'과 같은 형식으로 선언한다.
PrintStream클래스의 printf()가 대표적인 예시이다.
=> public PrintStream printf(String format, Object... args) {...}

위와 같이 가변인자를 제외하고 매개변수가 더 있다면, 가벼인자를 매개변수 중에서 제일 마지막에 선언해야 한다.
그렇지 않으면 컴파일 에러가 발생한다.

가변인자는 내부적으로 배열을 이용하는 것이다. 그래서 가변인자가 선언된 메서드를 호출할 때마다 배열이 새로
생성된다. 가변인자는 편리하지만, 이런 비효율이 숨겨져있다.

여기서 의문이 있다면 그럼 그냥 매개 변수 받는 타입을 배열로 하면 되는 것 아닌가라는 의문이 있다.
가변인수는 인자가 없을 수도, 엄청 많을 수도있다 예측이 불가능하기 때문에 사용하는 것이다, 매개변수 타입을
배열로 선언했을 때 인자로 아무것도 주지 않으면 컴파일 에러가 발생하기 때문이다.


(VarArgsEx.java)예제에서 주석처리된부분을 풀어서 concatenate()를 오버로딩 하면 에러가 발생한다.
이유는 오버로딩된 두 메서드가 서로 구분되지 않아서 발생된 것이다. 가변인자를 선언한 메서드를 오버로딩하면,
메서드를 호출했을 때 이와 같이 구별되지 못하는 경우가 종종 발생한다. 따라서 가변인자를 사용한 메서드는
오버로딩을 피하는 것이 좋다.