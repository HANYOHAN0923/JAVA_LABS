변수를 선언하고 처음으로 값을 저장하는 것을 변수의 초기화라고 한다. 변수의 초기화는 경우에 따라서 필수적이기도 하고
선택적이기도 하지만, 가능하면 선언과 동시에 적절한 값으로 초기화 하는 것이 바람직하다.

멤버변수는 초기화를 하지 않아도 자동적으로 변수의 자료형에 맞는 기본값으로 초기화가 이루어지지만, 지역변수는 사용하기
전에 반드시 초기화를 해야한다. 안 하고 프로그램을 실행하면 컴파일 에러가 발생한다

각 타입의 기본 값(default value)은 다음과 같다.
boolean: false
char: '\u0000'
byte, short, int: 0
long: 0L
float: 0.0f
double: 0.0d 또는 0.0
referenceVariable(String도 포함): null

같은 타입의 변수는 ,를 사용해서 함꼐 선언이나 초기화를 할 수 있다. int x = 10, y = 20; 반면 타입이 다른 변수는 같이 불가능하다.

멤버 변수의 초기화 방법:
1) 명시적 초기화 (explicit initialization)
class Car {
    int door = 4;               // 기본형 (primitive type) 변수의 초기화
    Engine e = new Engine();    // 참조형 (reference type) 변수의 초기화

    // ...
}
명시적 초기화가 간단하고 명료하지만, 보다 복잡한 초기화 작업이 필요할 때는 '초기화 블럭' 또는 생성자를 사용해야 한다.

2) 생성자(constructor)

3) 초기화 블럭(initialization block)
- 인스턴스 초기화 블럭: 인스턴스변수를 복잡한 초기화 하는데 사용
- 클래스 초기화 블럭: 클래스변수를 복잡한 초기화 하는데 사용

초기화 블럭을 작성하려면, 인스턴스 초기화 블럭은 단순히 클래스 내에 {}블럭을 만들고 그 안에 코드를 작성하면 된다.
그리고 클래스 초기화 블럭은 인스턴스 초기화 블럭 앞에 단순히 static 키워드를 덧붙이면 된다.

초기화 블럭 내에는 메서드 내에서와 같이 조건분, 반복문, 예외처리구문 등을 자유롭게 사용할 수 있으므로, 초기화 작업이
복잡하여 명싲거 초기화만으로는 부족한 경우 초기화 블럭을 사용한다.

클래스 초기화 블럭은 클래스가 메모리에 처음 로딩될 때 한번만 수행되며, 인스터스 초기화 블럭은 생성자와 같이 인스턴스를
생성할 때 마다 수행된다. 그리고 생성자 보다 인스턴스 초기화 블럭이 먼저 수행된다는 점도 중요하다.
(클래스가 처음 로딩될 때 클래스변수들이 자동적으로 메모리에 만들어지고, 곧바로 클래스 초기화블럭이 클래스변수들을 초기화
하게 되는 것이다)


인스턴스 변수의 초기화는 주로 생성자를 사용하고, 인스턴스 초기화 블럭은 모든 생성자에서 공통으로 수행돼야 하는 코드를
넣는데 사용한다. (InstanceInitializationBlock.java)
예제와 같이 클래스의 모든 생성자에 공통으로 수행되어야 하는 코드가 있을 때, 이 코드들을 각 생성자마다 작성하는 것이
아니라 예제와 같이 인스턴스 블럭에 넣어주면 코드의 길이도 짧아지고, 가독성이 올라간다. 이런 코드의 중복을 제거하는 것은
코드의 신뢰성을 높여 주고, 오류의 발생 가능성을 줄여 준다는 장점이 있다. 재사용성을 높이고 중복을 제거하는 것, 이것이
바로 객체 지향 프로그래밍이 추구하는 궁극적인 목표이다.


(BlockTest.java)
예제가 실행되면서, BlockTest가 메모리에 로딩될 대, 클래스 초기화 블럭이 가장 먼저 수행되어 'static { }'이 출력됨.
그 다음에 main 메서드가 수행되어서 BlockTest의 인스턴스가 실행되면서 인스턴스 초기화 블럭이 먼저 수행되고, 끝으로
생성자가 수행된다.

예제에서 알 수 있듯이 클래스 초기화 블럭은 처음 메모리에 로딩될 때 한번만 수행되었지만, 인스턴스 초기화 블럭은
인스턴스가 생성될 때 마다 생성자보다 먼저 수행되었다.

(StaticBlockTest.java)
명시적 초기화를 통해 배열 arr을 생성하고, 클래스 초기화 블럭을 이용해서 배열의 각 요소들을에 난수를 채웠다.
이처럼 배열이나 예외처리가 필요한 초기화에서는 명시적 초기화만으로는 복잡한 초기화 작업을 할 수 없다. 따라서 이런 경우
추가적으로 클래스 초기화 블럭을 사용하도록 한다. 인스턴스변수의 복잡한 초기화는 생성자 또는 인스턴스 초기화 블럭을 사용
한다.


- 멤버변수의 초기화 시기와 순서
클래스변수의 초기화시점: 클래스가 처음 로딩될 때 단 한번 초기화 된다
인스턴스변수의 초기화시점: 인스턴스가 생성될 때마다 각 인스턴스 별로 한번 초기화가 이루어진다
클래스변수의 초기화순서: 기본값 -> 명시적 초기화 -> 클래스 초기화 블럭
인스턴스변수의 초기화순서: 기본값 -> 명시적 초기화 -> 인스턴스 초기화 블럭 -> 생성자
More info ref: InitTest.jpg

(ProductTest.java)
공장에서 제품을 생산할 때 제품마다 생산일련변호(serialNo)를 부여하는 것과 같이 Product클래스의 인스턴스가 고유한 번호를
갖도록 하였다. Product클래스의 인스턴스를 생성할 때마다 인스턴스 블럭이 수행되어, 클래스변수 count의 값을 1증가시킨
다음, 그 값을 인스턴스변수 serialNo에 저장한다. 이렇게 새로 생성되는 인스턴스는 이전에 생성된 인스턴스보다 1이 증가된
서로 다른 serialNo값을 갖게 된다.

모든 생성자에게서 공통적으로 이루어져야하는 작업이기 때문에 인스턴스 블럭을 사용하였다. 만약 count를 인스턴스 변수로
선언했다면 인스턴스가 생성될 때마다 0으로 초기화될 것이다. 그래서 serialNo도 다 1로 나와서 같을 것이다.

(DocumentTest.java)