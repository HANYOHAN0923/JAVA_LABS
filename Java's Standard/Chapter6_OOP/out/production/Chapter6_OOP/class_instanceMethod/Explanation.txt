- MyMathTest.java
클래스 변수와 인스턴스 변수와 동일하게, 메서드 앞에 static이 붙어 있으면 클래스 메서드이고 붙어 있지 않으면 인스턴스
메서드이다. 클래스 메서드도 클래스 변수처럼, 객체(인스턴스)를 생성하지 않고도 '클래스이름.메서드이름(매개변수)'와 같은
식으로 호출이 가능하다. 반면 인스턴스 메서드는 반드시 객체를 생성해야만 호출할 수 있다.

인스턴스 메서드는 인스턴스 변수와 관련된 작업을 하는, 즉 메서드의 작업을 수행하는데 인스턴스 변수를 필요로 하는 메서드
이다. 인스턴스와 관계없는(인스턴스 변수나 인스턴스 메서드를 사용하지 않는)메서드를 클래스 메서드로 정의한다. 이게
일반적인 방법이다.

클래스 영역에 선언된 변수를 멤버변수 (멤버변수는 위와 같이 클래스변수와 인스턴스 변수로 나뉜다)

1. 클래스를 설계할 때, 멤버변수 중 모든 인스턴스에 공통으로 사용하는 것에 static을 붙인다.
- 생성된 각 인스턴스는 서로 독립적이기 때문에 각 인스턴스의 변수(iv)는 서로 다른 값을 유지한다. 그러나 모든 인스턴스에서
같은 값이 유지되어야 하는 변수는 static을 붙여서 클래스변수로 정의해야한다.

2. 클래스 변수는 인스턴스를 생성하지 않아도 사용할 수 있다.
-static이 붙은 변수는 클래스가 메모리에 올라갈 때 이미 자동적으로 생성되기 때문이다.

3. 클래스 메서드는 인스턴스 변수를 사용할 수 없다
이유는 위와 동일. 반면 인스턴스 변수나 인스턴스 메서드에서는 static이 붙은 멤버들을 사용하는 것이 가능하다.

4. 메서드 내에서 인스턴스 변수를 사용하지 않는다면 static을 붙이는 것을 고려하자
- staic이 없는 메서드(인스턴스 메서드)는 실행 시 호출되어야할 메서드를 찾는 과정이 추가적으로 필요하기 때문에 시간이 더
걸린다. 메서드 호출 시간을 단축하는 것을 통해, 성능을 향상시킬 수 있다.

Math.random() 이런거는 다 매개 변수로 받아서 처리하기 때문에 클래스 메서드이다.



-MemberCall.java
MemberCall c = new MemberCall();
int result = c.instanceMethod1();
을 다음과 같이 대체할 수 있다. int result = new MemberCall().instanceMethod1();

차이점이 있다면 다음과 같다.
첫번째 코드는 new Data()를 통한 객체를 d라는 참조변수로 접근이 가능하지만,
두번째 코드는 new Data()를 통해 메소드만 호출하고, 이후 참조변수는 저장하지 않기 때문에 일회성이다.
(메모리에는 인스턴스가 있지만 인스턴스의 주소 값을 갖는 참조 변수가 없기 때문이다)

일반적으로 객체자체는 필요가 없고, 이 객체의 메소드 호출이 목적인 경우 많이 사용한다.