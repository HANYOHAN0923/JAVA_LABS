'''3. 변수와 메서드'''

# 변수의 종류
변수의 종류를 결정짓는 중요한 요소는 '변수의 선언된 위치'이다.

<code>
class Variables {
    int iv;         // instance variable
    static int cv;  // class variable (shareable)

    void method() {
        int lv = 0; // local variable
    }
}
</code>

멤버변수(인스턴스변수와 클래스[static 키워드]변수)와 지역변수
- 클래스 변수의 생성 시기 : 클래스가 메모리에 올라갈 때
인스턴스 변수를 선언할 때 static 키워드를 앞에 붙이는 것을 통해 선언할 수 있다. 인스턴스마다 독립적인 저장공간을 갖는
인스턴스 변수와 달리, 클래스변수는 모든 인스턴스가 공통된 저장공간(변수)을 공유하게 된다. 한 클래스로부터 파생된 모든
인스턴스들이 공통적인 값을 유지해야하는 속성의 경우, 클래스 변수로 선언해야 한다.
클래스 변수는 인스턴스 변수와 달리 인스턴스를 생성하지 않고도 언제라도 바로 사용할 수 있는 특징이 있으며,
'클래스이름.클래스변수'와 같은 형식으로 사용한다. 위의 <code> 예제로 들자면 Variables.cv이다.

- 인스턴스 변수의 생성 시기 : 인스턴스가 생성될 때
클래스 영역에 선언된다. 인스턴스의 변수 값을 읽어 오거나 저장하기 위해서는 먼저 인스턴스를 생성해야한다. 인스턴스는
독립적인 저장공간을 가지므로 서로 다른 값을 가질 수 있다. 인스턴스마다 고유한 상태를 유지해야하는 속성의 경우, 인스턴스
변수로 선언한다.

- 지역 변수의 생성 시기 : 변수 선언문이 수행되었을 때
메서드 내에 선언되며 메서드 내에서만 사용이 가능하며, 메서드가 종료될 때까지만 유효성을 갖고 있는 변수이다. Chapter6 이전의
모든 예제 코드에서 사용된 변수들은 모두 지역 변수이다. 추가적으로 예를 들자면 for이나 while 안에서 선언된 지역변수는 {} 안에서만
사용이 가능하다.



# 클래스 변수와 인스턴스 변수(CardTest.java)



# 메서드
수학의 함수와 달리 메서드는 입력값 또는 출력값(결과값)이 없을 수도 있다. 둘 다 없을 수도 있다.
메서드를 사용할 때는 입력값과 결과값만 알면 된다. 굳이 내부적 코드 실행 과정과 알고리즘을 알 필요는 없다

메서드 사용의 이유
1) 높은 재사용성 - 메서드는 특정 제약 없이 계속 호출이 가능하며, 다른 프로그램에서도 사용이 가능하다
2) 중복된 코드의 제거(코드 가독성의 상승) - 프로그램을 작성하다보면, 같은 내용의 코드를 몇번이고 작성해서 실행해야할 때가 있다.
이때 같은 내용의 코드를 하나의 메소드로 만들어서, 그때마다 메소드를 호출하는 것이다.
3) 프로그램의 구조화 - 보통은 큰 프로그램에서 main메서드 안에 모든 코드를 넣는 것이 아니라 문장들을 작업단위로 나눠서
여러 개의 메서드에 담아 프로그램 구조를 단순화시키는 것이 필수적이다. 즉 main메서드는 프로그램의 전체 흐름이 한눈에 들어올
수 있도록 단순하게 구조화하는 것이 좋다



# 메서드의 선언과 구현, 메서드의 호출, return문 (Method.java, MyMathTest.java, ReturnParameterValid.java)
