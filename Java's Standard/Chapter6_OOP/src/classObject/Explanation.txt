'''1,2. 클래스와 객체'''

객체지향언어
1. 코드 재사용성이 높다. 부모 자식의 관게를 통해 기존 코드를 이용하여 발전 가능
2. 코드 관리가 용이하다. 위와 마찬가지로 더 쉽게 코드를 수정하여 발전시킬 수 있음
3. 신뢰성이 높은 프로그래밍이 가능하다. 제어자와 메서드를 이용해서 데이터를 보호하고 올바른 값을 유지하도록 하며,
코드의 중복을 제거하여 코드의 부일치로 인한 오작동을 방지할 수 있다.

# 클래스
정의: 객체를 정의해 놓은 것이다
용도: 객체를 생성하는데 사용된다

# 객체 (프로그래밍이라는 범위 안에서의)
정의: 메모리에 생성된 것
용도: 객체가 가지고 있는 기능과 속성에 따라 다름

클래스가 제품 설계도라면 객체는 제품, 클래스가 붕어빵 기계라면 객체는 붕어빵이라고 보면 된다. 이렇게 클래스를 만들면
객체를 만들기는 더 쉬워진다.


# 객체와 인스턴스
클래스로부터 객체를 만드는 과정을 클래스의 인스턴스화라고 한다. 어떤 클래스로부터 만들어진 객체를 그 클래스의 인스턴스라고 한다.
* 결국 인스턴스와 객체는 같은 의미이지만, 객체는 모든 인스턴스를 대표하는 포괄적인 의미를 갖고 있으며, 인스턴스는 특정 클래스로부터
만들어진 것임을 강조하는 보다 구체적인 의미를 갖고 있다.

Ex) 책상은 객체이다. 책상은 책상 클래스의 인스턴스이다.


# 객체의 구성요소 - 속성과 기능
속성(property): 멤버변수, 특성, 필트 상태 (즉 속성 property는 매게변수)
기능(function): 메서드, 함수, 행위 (즉 기능 function은 메소드)



# 인스턴스의 생성과 사용 (Iphone.java, TvTest/TvTest2/TvTest3.java)


# 객체 배열 (TvTest4.java)
많은 수의 객체를 다룰 때 사용하는데, 이때 배열 안에 객체 자체가 아닌 객체의 주소가 저장된다. 즉 객체 배열은 참조변수들을
하나로 묶은 참조 변수 배열이라고 볼 수 있다.


# 클래스의 또 다른 정의
클레스는 '객체를 생성하기 위한 틀'이며 '클래스는 속성과 기능으로 정의되어있다'고 했다. 이것은 객체지향이론의 관점에서
내린 정의이고, 프로그래밍적인 관점에서 클래스의 정의와 의미는 다음과 같다.

1) 클래스 - 데이터(구조체)와 함수의 결합
프로그래밍 언어에서 데이터 처리를 위한 데이터 저장형태의 발전과정은 다음과 같다.
변수 -> 배열 -> 구조체 -> 클래스
-변수: 하나의 데이터를 저장할 수 있는 공간
-배열: 같은 종류의 여러 데이터를 하나의 집합으로 저장할 수 있는 공간
-구조체: 서로 관련된 여러 데이터를 종류에 관계없이 하나의 집합으로 저장할 수 있는 공간
-클래스: 위와 같음 (서로 관련된 변수들을 정의하고 이들에 대한 작업을 수행하는 함수들을 함께 정의한 것이 클래스이다) => 함수는 데이터를 가지고 작업하기 때문에 데이터와 함수는 사실상 때어 놓을 수 없는 관계이다

2) 클래스 - 사용자정의 타입(user defined type)
프로그래밍언어에서 제공하는 자료형(primitive type) 외에 프로그래머가 서로 관련된 변수들을 묶어서 하나의 타입으로 새로 추가하는
것을 사용자정의 타입이라고한다. 객체지향언어에서는 클래스가 곧 사용자 정의 타입이다. 기본(자료)형의 개수는 8개로 고정적으로
정해져 있지만 참조형의 개수가 정해져 있지 않은 이유는 이처럼 프로그래머가 새로운 타입을 추가할 수 있기 대문이다.

예를 들어서 육상대회에서 선수들의 기록을 시,분,초 단위로 따로 저장을 해야한다. 그럼 여러개의 변수를 만들거나, 배열을 만드는 것이
아니라 class Time {int hour; int minutes; float second;}와 같이 객체지향적 코드를 작성을 하는 것이 좋다.